generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator typegraphql {
//   provider = "typegraphql-prisma"
//   output   = "../src/graphql"
// }

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  username          String           @unique
  password          String
  books             Book[]
  profilePictureUrl String           @default("https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y")
  userRoleName      UserRoleEnum
  userRole          UserRole         @relation(fields: [userRoleName], references: [name])
  transaction       Transaction[]
  BookUnverified    BookUnverified[]
}

enum UserRoleEnum {
  USER
  ADMIN
}

model UserRole {
  name        UserRoleEnum @id
  description String
  user        User[]
}

enum BookStateEnum {
  SOLD
  DONATED
  TO_BE_DONATED
  TO_BE_SOLD
}

model BookState {
  name           BookStateEnum    @id
  description    String
  books          Book[]
  BookUnverified BookUnverified[]
}

model BookUnverified {
  id               String           @id @default(cuid())
  name             String
  description      String
  userId           String
  price            Int
  author           String?
  bookPhoto        String?
  bookStateName    BookStateEnum
  bookCategoryName BookCategoryEnum
  user             User             @relation(fields: [userId], references: [id])
  bookState        BookState        @relation(fields: [bookStateName], references: [name])
  bookCategory     BookCategory     @relation(fields: [bookCategoryName], references: [name])
  transaction      Transaction[]
}

model Book {
  id               String           @id @default(cuid())
  name             String
  description      String
  userId           String
  price            Int
  author           String?
  bookPhoto        String?
  bookStateName    BookStateEnum
  bookCategoryName BookCategoryEnum
  user             User             @relation(fields: [userId], references: [id])
  bookState        BookState        @relation(fields: [bookStateName], references: [name])
  bookCategory     BookCategory     @relation(fields: [bookCategoryName], references: [name])
  transaction      Transaction[]
}

enum TransactionState {
  ORDER_PLACED
  IN_INVENTORY
  OUT_FOR_DELIVERY
  DELIVERED
}

model Transaction {
  id               String           @id @default(cuid())
  address          String?
  deliveryState    TransactionState
  userId           String
  bookId           String
  user             User             @relation(fields: [userId], references: [id])
  book             Book             @relation(fields: [bookId], references: [id])
  BookUnverified   BookUnverified?  @relation(fields: [bookUnverifiedId], references: [id])
  bookUnverifiedId String?
}

enum BookCategoryEnum {
  FANTASY
  ADVENTURE
  ROMANCE
  CONTEMPORARY
  DYSTOPIAN
  MYSTERY
  HORROR
  THRILLER
  PARANORMAL
  HISTORICAL_FICTION
  SCIENCE_FICTION
  MEMOIR
  COOKING
  ART
  SELF_HELP
  DEVELOPMENT
  MOTIVATIONAL
  HEALTH
  HISTORY
  TRAVEL
  GUIDE_HOW_TO
  FAMILIES_RELATIONSHIPS
  HUMOR
  MEDICAL_PREPARATION
  ENGINEERING_PREPARATION
  SEE_PREPARATION
  PLUS_TWO
}

model BookCategory {
  name           BookCategoryEnum @id
  description    String
  books          Book[]
  BookUnverified BookUnverified[]
}
